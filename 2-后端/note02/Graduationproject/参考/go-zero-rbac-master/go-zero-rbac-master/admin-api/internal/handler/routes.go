// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	appitem "aso/admin-api/internal/handler/app/item"
	apptype "aso/admin-api/internal/handler/app/type"
	syscommon "aso/admin-api/internal/handler/sys/common"
	sysdept "aso/admin-api/internal/handler/sys/dept"
	sysmenu "aso/admin-api/internal/handler/sys/menu"
	sysrole "aso/admin-api/internal/handler/sys/role"
	sysuser "aso/admin-api/internal/handler/sys/user"
	wechatconfig "aso/admin-api/internal/handler/wechat/config"
	wechatmaterial "aso/admin-api/internal/handler/wechat/material"
	wechatmenu "aso/admin-api/internal/handler/wechat/menu"
	wechatreply "aso/admin-api/internal/handler/wechat/reply"
	"aso/admin-api/internal/svc"

	"github.com/tal-tech/go-zero/rest"
)

func RegisterHandlers(engine *rest.Server, serverCtx *svc.ServiceContext) {
	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/api/sys/common/captcha",
				Handler: syscommon.CaptchaHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/api/sys/common/login",
				Handler: syscommon.UserLoginHandler(serverCtx),
			},
		},
	)

	engine.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Authority},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/api/sys/common/person",
					Handler: syscommon.PersonHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/api/sys/common/menus",
					Handler: syscommon.PermsMenusHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	engine.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Authority},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/api/sys/menu/list",
					Handler: sysmenu.MenuListHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/api/sys/menu/info",
					Handler: sysmenu.MenuInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/api/sys/menu/update",
					Handler: sysmenu.MenuUpdateHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/api/sys/menu/add",
					Handler: sysmenu.MenuAddHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/api/sys/menu/delete",
					Handler: sysmenu.MenuDeleteHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	engine.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Authority},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/api/sys/user/page",
					Handler: sysuser.UserPageHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/api/sys/user/add",
					Handler: sysuser.UserAddHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/api/sys/user/info",
					Handler: sysuser.UserInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/api/sys/user/update",
					Handler: sysuser.UserUpdateHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/api/sys/user/move",
					Handler: sysuser.UserMoveHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	engine.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Authority},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/api/sys/dept/list",
					Handler: sysdept.DeptListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/api/sys/dept/add",
					Handler: sysdept.DeptAddHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/api/sys/dept/delete",
					Handler: sysdept.DeptDeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/api/sys/dept/order",
					Handler: sysdept.DeptOrderHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	engine.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Authority},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/api/sys/role/page",
					Handler: sysrole.RolePageHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/api/sys/role/list",
					Handler: sysrole.RoleListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/api/sys/role/add",
					Handler: sysrole.RoleAddHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/api/sys/role/info",
					Handler: sysrole.RoleInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/api/sys/role/delete",
					Handler: sysrole.RoleDeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/api/sys/role/update",
					Handler: sysrole.RoleUpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	engine.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Authority},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/api/wechat/config/info",
					Handler: wechatconfig.ConfigInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/api/wechat/config/update",
					Handler: wechatconfig.ConfigUpdateHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/api/wechat/config/reply",
					Handler: wechatconfig.ConfigUpdateReplyHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	engine.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Authority},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/api/wechat/material/page",
					Handler: wechatmaterial.MaterialPageHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/api/wechat/material/add",
					Handler: wechatmaterial.MaterialAddHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/api/wechat/material/list",
					Handler: wechatmaterial.MaterialItemListHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	engine.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Authority},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/api/wechat/menu/add",
					Handler: wechatmenu.MenuAddHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/api/wechat/menu/list",
					Handler: wechatmenu.MenuListHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	engine.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Authority},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/api/wechat/reply/add",
					Handler: wechatreply.ReplyKeyAddHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/api/wechat/reply/page",
					Handler: wechatreply.ReplyPageHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/api/wechat/reply/info",
					Handler: wechatreply.ReplyInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/api/wechat/reply/delete",
					Handler: wechatreply.ReplyDeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/api/wechat/reply/update",
					Handler: wechatreply.ReplyUpdateHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	engine.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Authority},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/api/app/item/page",
					Handler: appitem.ItemPageHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/api/app/item/add",
					Handler: appitem.ItemAddHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/api/app/item/upload",
					Handler: appitem.UploadHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	engine.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Authority},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/api/app/type/add",
					Handler: apptype.TypeAddHandler(serverCtx),
				},
				{
					Method:  http.MethodPut,
					Path:    "/api/app/type/update",
					Handler: apptype.TypeUpdateHandler(serverCtx),
				},
				{
					Method:  http.MethodDelete,
					Path:    "/api/app/type/delete",
					Handler: apptype.TypeDeleteHandler(serverCtx),
				},
				{
					Method:  http.MethodGet,
					Path:    "/api/app/type/list",
					Handler: apptype.TypeListHandler(serverCtx),
				},
			}...,
		),
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)
}
