/*
 * # 此文件版权属于ASO.DESIGN
 * # 文件：sysserver.go  项目：aso-zero
 * # 作用：
 * # 当前修改时间：2021年07月11日 21:34:59
 * # 上次修改时间：2021年07月11日 21:02:36
 * # 作者：thunur
 * # 此文件不可非法传播、倒卖、共享，否则我们将追究相应的法律责任。
 * # 您如果已获得ASO.DESIGN授权可在原有基础上进行修改使用
 * # 如果您还没获得授权请联系我们 thunur@qq.com
 * # Copyright (c) 2021 aso.design
 */

// Code generated by goctl. DO NOT EDIT!
// Source: sys.proto

package server

import (
	"context"

	"aso/rpc/sys/internal/logic"
	"aso/rpc/sys/internal/svc"
	"aso/rpc/sys/sys"
)

type SysServer struct {
	svcCtx *svc.ServiceContext
}

func NewSysServer(svcCtx *svc.ServiceContext) *SysServer {
	return &SysServer{
		svcCtx: svcCtx,
	}
}

//  验证码
func (s *SysServer) Captcha(ctx context.Context, in *sys.CaptchaRequest) (*sys.CaptchaResp, error) {
	l := logic.NewCaptchaLogic(ctx, s.svcCtx)
	return l.Captcha(in)
}

//  登录
func (s *SysServer) Login(ctx context.Context, in *sys.LoginRequest) (*sys.LoginResp, error) {
	l := logic.NewLoginLogic(ctx, s.svcCtx)
	return l.Login(in)
}

//  用户详情
func (s *SysServer) UserInfo(ctx context.Context, in *sys.UserInfoRequest) (*sys.UserInfoResp, error) {
	l := logic.NewUserInfoLogic(ctx, s.svcCtx)
	return l.UserInfo(in)
}

//  添加用户
func (s *SysServer) UserAdd(ctx context.Context, in *sys.UserAddRequest) (*sys.UserAddResp, error) {
	l := logic.NewUserAddLogic(ctx, s.svcCtx)
	return l.UserAdd(in)
}

//  用户列表
func (s *SysServer) UserList(ctx context.Context, in *sys.UserListRequest) (*sys.UserListResp, error) {
	l := logic.NewUserListLogic(ctx, s.svcCtx)
	return l.UserList(in)
}

//  更新用户
func (s *SysServer) UserUpdate(ctx context.Context, in *sys.UserUpdateRequest) (*sys.UserUpdateResp, error) {
	l := logic.NewUserUpdateLogic(ctx, s.svcCtx)
	return l.UserUpdate(in)
}

//  删除用户
func (s *SysServer) UserDelete(ctx context.Context, in *sys.UserDeleteReq) (*sys.UserDeleteResp, error) {
	l := logic.NewUserDeleteLogic(ctx, s.svcCtx)
	return l.UserDelete(in)
}

//  权限菜单
func (s *SysServer) PermsMenus(ctx context.Context, in *sys.PermsMenusReq) (*sys.PermsMenusResp, error) {
	l := logic.NewPermsMenusLogic(ctx, s.svcCtx)
	return l.PermsMenus(in)
}

//  转移用户
func (s *SysServer) UserMove(ctx context.Context, in *sys.UserMoveReq) (*sys.UserMoveResp, error) {
	l := logic.NewUserMoveLogic(ctx, s.svcCtx)
	return l.UserMove(in)
}

//  菜单添加
func (s *SysServer) MenuAdd(ctx context.Context, in *sys.MenuAddRequest) (*sys.MenuAddResp, error) {
	l := logic.NewMenuAddLogic(ctx, s.svcCtx)
	return l.MenuAdd(in)
}

//  菜单列表
func (s *SysServer) MenuList(ctx context.Context, in *sys.MenuListRequest) (*sys.MenuListResp, error) {
	l := logic.NewMenuListLogic(ctx, s.svcCtx)
	return l.MenuList(in)
}

//  菜单删除
func (s *SysServer) MenuDelete(ctx context.Context, in *sys.MenuDeleteRequest) (*sys.MenuDeleteResp, error) {
	l := logic.NewMenuDeleteLogic(ctx, s.svcCtx)
	return l.MenuDelete(in)
}

//  菜单更新
func (s *SysServer) MenuUpdate(ctx context.Context, in *sys.MenuUpdateRequest) (*sys.MenuUpdateResp, error) {
	l := logic.NewMenuUpdateLogic(ctx, s.svcCtx)
	return l.MenuUpdate(in)
}

//  菜单详情
func (s *SysServer) MenuInfo(ctx context.Context, in *sys.MenuInfoRequest) (*sys.MenuInfoResp, error) {
	l := logic.NewMenuInfoLogic(ctx, s.svcCtx)
	return l.MenuInfo(in)
}

//  角色添加
func (s *SysServer) RoleAdd(ctx context.Context, in *sys.RoleAddRequest) (*sys.RoleAddResp, error) {
	l := logic.NewRoleAddLogic(ctx, s.svcCtx)
	return l.RoleAdd(in)
}

//  角色分页列表
func (s *SysServer) RoleListPage(ctx context.Context, in *sys.RoleListPageRequest) (*sys.RoleListPageResp, error) {
	l := logic.NewRoleListPageLogic(ctx, s.svcCtx)
	return l.RoleListPage(in)
}

//  角色列表
func (s *SysServer) RoleList(ctx context.Context, in *sys.RoleListRequest) (*sys.RoleListResp, error) {
	l := logic.NewRoleListLogic(ctx, s.svcCtx)
	return l.RoleList(in)
}

//  角色删除
func (s *SysServer) RoleDelete(ctx context.Context, in *sys.RoleDeleteRequest) (*sys.RoleDeleteResp, error) {
	l := logic.NewRoleDeleteLogic(ctx, s.svcCtx)
	return l.RoleDelete(in)
}

//  角色更新
func (s *SysServer) RoleUpdate(ctx context.Context, in *sys.RoleUpdateRequest) (*sys.RoleUpdateResp, error) {
	l := logic.NewRoleUpdateLogic(ctx, s.svcCtx)
	return l.RoleUpdate(in)
}

//  角色详情
func (s *SysServer) RoleInfo(ctx context.Context, in *sys.RoleInfoRequest) (*sys.RoleInfoResp, error) {
	l := logic.NewRoleInfoLogic(ctx, s.svcCtx)
	return l.RoleInfo(in)
}

//  DeptAdd 部门添加
func (s *SysServer) DeptAdd(ctx context.Context, in *sys.DeptAddRequest) (*sys.DeptAddResp, error) {
	l := logic.NewDeptAddLogic(ctx, s.svcCtx)
	return l.DeptAdd(in)
}

//  DeptList 部门列表
func (s *SysServer) DeptList(ctx context.Context, in *sys.DeptListRequest) (*sys.DeptListResp, error) {
	l := logic.NewDeptListLogic(ctx, s.svcCtx)
	return l.DeptList(in)
}

//  DeptOrder 部门排序
func (s *SysServer) DeptOrder(ctx context.Context, in *sys.DeptOderRequest) (*sys.DeptOrderResp, error) {
	l := logic.NewDeptOrderLogic(ctx, s.svcCtx)
	return l.DeptOrder(in)
}

//  DeptDelete 删除部门
func (s *SysServer) DeptDelete(ctx context.Context, in *sys.DeptDeleteRequest) (*sys.DeptDeleteResp, error) {
	l := logic.NewDeptDeleteLogic(ctx, s.svcCtx)
	return l.DeptDelete(in)
}

//  DeleteUpdate 部门更新
func (s *SysServer) DeleteUpdate(ctx context.Context, in *sys.DeptUpdateRequest) (*sys.DeptUpdateResp, error) {
	l := logic.NewDeleteUpdateLogic(ctx, s.svcCtx)
	return l.DeleteUpdate(in)
}
