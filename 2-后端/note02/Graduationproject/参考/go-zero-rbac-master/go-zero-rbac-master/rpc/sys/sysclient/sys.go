/*
 * # 此文件版权属于ASO.DESIGN
 * # 文件：sys.go  项目：aso-zero
 * # 作用：
 * # 当前修改时间：2021年07月11日 21:34:59
 * # 上次修改时间：2021年07月11日 21:02:36
 * # 作者：thunur
 * # 此文件不可非法传播、倒卖、共享，否则我们将追究相应的法律责任。
 * # 您如果已获得ASO.DESIGN授权可在原有基础上进行修改使用
 * # 如果您还没获得授权请联系我们 thunur@qq.com
 * # Copyright (c) 2021 aso.design
 */

// Code generated by goctl. DO NOT EDIT!
// Source: sys.proto

//go:generate mockgen -destination ./sys_mock.go -package sysclient -source $GOFILE

package sysclient

import (
	"context"

	"aso/rpc/sys/sys"

	"github.com/tal-tech/go-zero/zrpc"
)

type (
	RoleDeleteRequest   = sys.RoleDeleteRequest
	RoleListPageRequest = sys.RoleListPageRequest
	RoleListRequest     = sys.RoleListRequest
	MenuListData        = sys.MenuListData
	MenuInfoResp        = sys.MenuInfoResp
	MenuDeleteResp      = sys.MenuDeleteResp
	UserInfoRequest     = sys.UserInfoRequest
	UserListData        = sys.UserListData
	DeptUpdateRequest   = sys.DeptUpdateRequest
	PermsMenusReq       = sys.PermsMenusReq
	PermsMenusData      = sys.PermsMenusData
	UserMoveReq         = sys.UserMoveReq
	UserDeleteResp      = sys.UserDeleteResp
	MenuAddResp         = sys.MenuAddResp
	RoleDeleteResp      = sys.RoleDeleteResp
	UserListResp        = sys.UserListResp
	RoleAddRequest      = sys.RoleAddRequest
	RoleInfoRequest     = sys.RoleInfoRequest
	RoleListPageResp    = sys.RoleListPageResp
	UserListRequest     = sys.UserListRequest
	UserDeleteReq       = sys.UserDeleteReq
	PermsMenusResp      = sys.PermsMenusResp
	DeptOderRequest     = sys.DeptOderRequest
	DeptDeleteResp      = sys.DeptDeleteResp
	UserAddResp         = sys.UserAddResp
	MenuDeleteRequest   = sys.MenuDeleteRequest
	DeptUpdateResp      = sys.DeptUpdateResp
	LoginResp           = sys.LoginResp
	RoleListData        = sys.RoleListData
	MenuUpdateResp      = sys.MenuUpdateResp
	DeptOrderResp       = sys.DeptOrderResp
	UserInfoResp        = sys.UserInfoResp
	RoleInfoResp        = sys.RoleInfoResp
	DeptListResp        = sys.DeptListResp
	DeptListRequest     = sys.DeptListRequest
	CaptchaRequest      = sys.CaptchaRequest
	UserUpdateResp      = sys.UserUpdateResp
	MenuUpdateRequest   = sys.MenuUpdateRequest
	RoleAddResp         = sys.RoleAddResp
	DeptAddRequest      = sys.DeptAddRequest
	DeptDeleteRequest   = sys.DeptDeleteRequest
	UserUpdateRequest   = sys.UserUpdateRequest
	UserMoveResp        = sys.UserMoveResp
	MenuInfoRequest     = sys.MenuInfoRequest
	RoleUpdateRequest   = sys.RoleUpdateRequest
	RoleUpdateResp      = sys.RoleUpdateResp
	DeptAddResp         = sys.DeptAddResp
	MenuAddRequest      = sys.MenuAddRequest
	MenuListRequest     = sys.MenuListRequest
	MenuListResp        = sys.MenuListResp
	DeptListData        = sys.DeptListData
	CaptchaResp         = sys.CaptchaResp
	LoginRequest        = sys.LoginRequest
	UserAddRequest      = sys.UserAddRequest
	RoleListResp        = sys.RoleListResp

	Sys interface {
		//  验证码
		Captcha(ctx context.Context, in *CaptchaRequest) (*CaptchaResp, error)
		//  登录
		Login(ctx context.Context, in *LoginRequest) (*LoginResp, error)
		//  用户详情
		UserInfo(ctx context.Context, in *UserInfoRequest) (*UserInfoResp, error)
		//  添加用户
		UserAdd(ctx context.Context, in *UserAddRequest) (*UserAddResp, error)
		//  用户列表
		UserList(ctx context.Context, in *UserListRequest) (*UserListResp, error)
		//  更新用户
		UserUpdate(ctx context.Context, in *UserUpdateRequest) (*UserUpdateResp, error)
		//  删除用户
		UserDelete(ctx context.Context, in *UserDeleteReq) (*UserDeleteResp, error)
		//  权限菜单
		PermsMenus(ctx context.Context, in *PermsMenusReq) (*PermsMenusResp, error)
		//  转移用户
		UserMove(ctx context.Context, in *UserMoveReq) (*UserMoveResp, error)
		//  菜单添加
		MenuAdd(ctx context.Context, in *MenuAddRequest) (*MenuAddResp, error)
		//  菜单列表
		MenuList(ctx context.Context, in *MenuListRequest) (*MenuListResp, error)
		//  菜单删除
		MenuDelete(ctx context.Context, in *MenuDeleteRequest) (*MenuDeleteResp, error)
		//  菜单更新
		MenuUpdate(ctx context.Context, in *MenuUpdateRequest) (*MenuUpdateResp, error)
		//  菜单详情
		MenuInfo(ctx context.Context, in *MenuInfoRequest) (*MenuInfoResp, error)
		//  角色添加
		RoleAdd(ctx context.Context, in *RoleAddRequest) (*RoleAddResp, error)
		//  角色分页列表
		RoleListPage(ctx context.Context, in *RoleListPageRequest) (*RoleListPageResp, error)
		//  角色列表
		RoleList(ctx context.Context, in *RoleListRequest) (*RoleListResp, error)
		//  角色删除
		RoleDelete(ctx context.Context, in *RoleDeleteRequest) (*RoleDeleteResp, error)
		//  角色更新
		RoleUpdate(ctx context.Context, in *RoleUpdateRequest) (*RoleUpdateResp, error)
		//  角色详情
		RoleInfo(ctx context.Context, in *RoleInfoRequest) (*RoleInfoResp, error)
		//  DeptAdd 部门添加
		DeptAdd(ctx context.Context, in *DeptAddRequest) (*DeptAddResp, error)
		//  DeptList 部门列表
		DeptList(ctx context.Context, in *DeptListRequest) (*DeptListResp, error)
		//  DeptOrder 部门排序
		DeptOrder(ctx context.Context, in *DeptOderRequest) (*DeptOrderResp, error)
		//  DeptDelete 删除部门
		DeptDelete(ctx context.Context, in *DeptDeleteRequest) (*DeptDeleteResp, error)
		//  DeleteUpdate 部门更新
		DeleteUpdate(ctx context.Context, in *DeptUpdateRequest) (*DeptUpdateResp, error)
	}

	defaultSys struct {
		cli zrpc.Client
	}
)

func NewSys(cli zrpc.Client) Sys {
	return &defaultSys{
		cli: cli,
	}
}

//  验证码
func (m *defaultSys) Captcha(ctx context.Context, in *CaptchaRequest) (*CaptchaResp, error) {
	client := sys.NewSysClient(m.cli.Conn())
	return client.Captcha(ctx, in)
}

//  登录
func (m *defaultSys) Login(ctx context.Context, in *LoginRequest) (*LoginResp, error) {
	client := sys.NewSysClient(m.cli.Conn())
	return client.Login(ctx, in)
}

//  用户详情
func (m *defaultSys) UserInfo(ctx context.Context, in *UserInfoRequest) (*UserInfoResp, error) {
	client := sys.NewSysClient(m.cli.Conn())
	return client.UserInfo(ctx, in)
}

//  添加用户
func (m *defaultSys) UserAdd(ctx context.Context, in *UserAddRequest) (*UserAddResp, error) {
	client := sys.NewSysClient(m.cli.Conn())
	return client.UserAdd(ctx, in)
}

//  用户列表
func (m *defaultSys) UserList(ctx context.Context, in *UserListRequest) (*UserListResp, error) {
	client := sys.NewSysClient(m.cli.Conn())
	return client.UserList(ctx, in)
}

//  更新用户
func (m *defaultSys) UserUpdate(ctx context.Context, in *UserUpdateRequest) (*UserUpdateResp, error) {
	client := sys.NewSysClient(m.cli.Conn())
	return client.UserUpdate(ctx, in)
}

//  删除用户
func (m *defaultSys) UserDelete(ctx context.Context, in *UserDeleteReq) (*UserDeleteResp, error) {
	client := sys.NewSysClient(m.cli.Conn())
	return client.UserDelete(ctx, in)
}

//  权限菜单
func (m *defaultSys) PermsMenus(ctx context.Context, in *PermsMenusReq) (*PermsMenusResp, error) {
	client := sys.NewSysClient(m.cli.Conn())
	return client.PermsMenus(ctx, in)
}

//  转移用户
func (m *defaultSys) UserMove(ctx context.Context, in *UserMoveReq) (*UserMoveResp, error) {
	client := sys.NewSysClient(m.cli.Conn())
	return client.UserMove(ctx, in)
}

//  菜单添加
func (m *defaultSys) MenuAdd(ctx context.Context, in *MenuAddRequest) (*MenuAddResp, error) {
	client := sys.NewSysClient(m.cli.Conn())
	return client.MenuAdd(ctx, in)
}

//  菜单列表
func (m *defaultSys) MenuList(ctx context.Context, in *MenuListRequest) (*MenuListResp, error) {
	client := sys.NewSysClient(m.cli.Conn())
	return client.MenuList(ctx, in)
}

//  菜单删除
func (m *defaultSys) MenuDelete(ctx context.Context, in *MenuDeleteRequest) (*MenuDeleteResp, error) {
	client := sys.NewSysClient(m.cli.Conn())
	return client.MenuDelete(ctx, in)
}

//  菜单更新
func (m *defaultSys) MenuUpdate(ctx context.Context, in *MenuUpdateRequest) (*MenuUpdateResp, error) {
	client := sys.NewSysClient(m.cli.Conn())
	return client.MenuUpdate(ctx, in)
}

//  菜单详情
func (m *defaultSys) MenuInfo(ctx context.Context, in *MenuInfoRequest) (*MenuInfoResp, error) {
	client := sys.NewSysClient(m.cli.Conn())
	return client.MenuInfo(ctx, in)
}

//  角色添加
func (m *defaultSys) RoleAdd(ctx context.Context, in *RoleAddRequest) (*RoleAddResp, error) {
	client := sys.NewSysClient(m.cli.Conn())
	return client.RoleAdd(ctx, in)
}

//  角色分页列表
func (m *defaultSys) RoleListPage(ctx context.Context, in *RoleListPageRequest) (*RoleListPageResp, error) {
	client := sys.NewSysClient(m.cli.Conn())
	return client.RoleListPage(ctx, in)
}

//  角色列表
func (m *defaultSys) RoleList(ctx context.Context, in *RoleListRequest) (*RoleListResp, error) {
	client := sys.NewSysClient(m.cli.Conn())
	return client.RoleList(ctx, in)
}

//  角色删除
func (m *defaultSys) RoleDelete(ctx context.Context, in *RoleDeleteRequest) (*RoleDeleteResp, error) {
	client := sys.NewSysClient(m.cli.Conn())
	return client.RoleDelete(ctx, in)
}

//  角色更新
func (m *defaultSys) RoleUpdate(ctx context.Context, in *RoleUpdateRequest) (*RoleUpdateResp, error) {
	client := sys.NewSysClient(m.cli.Conn())
	return client.RoleUpdate(ctx, in)
}

//  角色详情
func (m *defaultSys) RoleInfo(ctx context.Context, in *RoleInfoRequest) (*RoleInfoResp, error) {
	client := sys.NewSysClient(m.cli.Conn())
	return client.RoleInfo(ctx, in)
}

//  DeptAdd 部门添加
func (m *defaultSys) DeptAdd(ctx context.Context, in *DeptAddRequest) (*DeptAddResp, error) {
	client := sys.NewSysClient(m.cli.Conn())
	return client.DeptAdd(ctx, in)
}

//  DeptList 部门列表
func (m *defaultSys) DeptList(ctx context.Context, in *DeptListRequest) (*DeptListResp, error) {
	client := sys.NewSysClient(m.cli.Conn())
	return client.DeptList(ctx, in)
}

//  DeptOrder 部门排序
func (m *defaultSys) DeptOrder(ctx context.Context, in *DeptOderRequest) (*DeptOrderResp, error) {
	client := sys.NewSysClient(m.cli.Conn())
	return client.DeptOrder(ctx, in)
}

//  DeptDelete 删除部门
func (m *defaultSys) DeptDelete(ctx context.Context, in *DeptDeleteRequest) (*DeptDeleteResp, error) {
	client := sys.NewSysClient(m.cli.Conn())
	return client.DeptDelete(ctx, in)
}

//  DeleteUpdate 部门更新
func (m *defaultSys) DeleteUpdate(ctx context.Context, in *DeptUpdateRequest) (*DeptUpdateResp, error) {
	client := sys.NewSysClient(m.cli.Conn())
	return client.DeleteUpdate(ctx, in)
}
