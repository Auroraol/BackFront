
local shop_order_count = 0
local shop_chat_count = 0


1. 查询店铺的订单和聊天数量

2. 判断店铺是否开通了qc业务、客伴业务、售后业务
    -- 查询店铺有没有qc业务
    -- 查询店铺有没有客伴业务(如果平台是jdzy会当做jd)         
    -- 查询店铺有没有售后业务(如果平台是jdzy会当做jd)


2. 查询服务器成本
    -- 明察质检, 售后机器人, 客伴的服务器成本:
        如果店铺有, 就每月累加, 计算出总成本
    
    -- 机器人服务器成本:
        "jd" 或 "jdzy"（京东或京东自营），则累加 robot_jd_cost 和 robot_dy_cost。
        "dy"（抖音），则累加 robot_dy_cost 和 robot_jd_cost。
        "ks"（快手），则累加 robot_ks_cost。
        "pdd"（拼多多），则累加 robot_pdd_cost。
        "tb"（淘宝），则累加 robot_tb_cost。

3. 计算业务成本 
店铺机器人业务服务器成本 = (店铺的订单+店铺聊天数量) / (所有店铺的订单次数总和 + 所有店铺的聊天次数总和) *机器人成本服务器成本
明察质检业务服务器成本 = 店铺聊天数量 / qc_chat_count * 明察质检服务器成本
客伴业务服务器成本 =  (店铺的订单+店铺聊天数量) / (keban_shop_order_count + keban_shop_chat_count) * 客伴服务器成本
售后业务服务器成 = 售后机器人服务器成本 / 售后店铺数量


查shop_overview_day_all表, 如果 qc_shop_chat_count_rv 表不为空，则将第一个结果中的 chat_count 值赋给 qc_chat_count
查shop_overview_day_all表, 如果 keban_shop_chat_count_rv 表不为空，则将第一个结果中的 chat_count 值赋给 keban_shop_chat_count




明察质检业务服务器成本 = 11,004,056 / qc_chat_count * 618003
​


sql
SELECT s.id AS shop_id
FROM shop s
WHERE s.company_id IN (
    SELECT c.id
    FROM company c
    WHERE c.expired_time > :start_time_timestamp
);
这条查询从 shop 表中查找所有 company_id 在符合条件的公司 ID 列表中的商店。

SELECT CASE 
           WHEN EXISTS (
               SELECT 1
               FROM shop s
               WHERE s.company_id IN (
                   SELECT c.id
                   FROM company c
                   WHERE c.expired_time > :start_time_timestamp
               ) AND s.id = :shop_id
           ) THEN TRUE
           ELSE FALSE
       END AS qc_business;
这条 SQL 查询使用 EXISTS 来判断特定的 shop_id 是否存在于符合条件的商店中。
:shop_id 是传入的商店 ID。
查询结果将返回 TRUE 或 FALSE，表示给定的 shop_id 是否在符合条件的商店列表中。


db.company.find({expired_time: {$gt: 20240601}}) 

db.shop.find({expired_time: {$gt: 20240601}}) 

查询符合条件的商店（步骤 3）
sql
SELECT s.id AS shop_id
FROM shop s
WHERE s.company_id IN (
    SELECT c.id
    FROM company c
    WHERE c.expired_time > :start_time_timestamp
);