// vite.config.ts
import { resolve as resolve2 } from "path";
import { defineConfig } from "file:///D:/Users/Desktop/Project/juyocloud-vue/node_modules/vite/dist/node/index.js";

// presets/tov.ts
import { resolve } from "path";

// presets/shared/env.ts
import { loadEnv } from "file:///D:/Users/Desktop/Project/juyocloud-vue/node_modules/vite/dist/node/index.js";
var { NODE_ENV } = process.env;
var isProduction = NODE_ENV === "production";
var stringToBoolean = (v) => {
  return Boolean(v === "true" || false);
};
var useEnv = () => {
  const env2 = isProduction ? loadEnv("production", ".") : loadEnv("development", ".");
  const {
    VITE_APP_TITLE,
    VITE_APP_INSPECT,
    VITE_APP_MARKDOWN,
    VITE_APP_API_AUTO_IMPORT,
    VITE_APP_MOCK_IN_PRODUCTION,
    VITE_APP_DIR_API_AUTO_IMPORT,
    VITE_APP_COMPRESSINON_ALGORITHM
  } = env2;
  return {
    VITE_APP_TITLE,
    VITE_APP_COMPRESSINON_ALGORITHM,
    VITE_APP_INSPECT: stringToBoolean(VITE_APP_INSPECT),
    VITE_APP_MARKDOWN: stringToBoolean(VITE_APP_MARKDOWN),
    VITE_APP_API_AUTO_IMPORT: stringToBoolean(VITE_APP_API_AUTO_IMPORT),
    VITE_APP_MOCK_IN_PRODUCTION: stringToBoolean(VITE_APP_MOCK_IN_PRODUCTION),
    VITE_APP_DIR_API_AUTO_IMPORT: stringToBoolean(VITE_APP_DIR_API_AUTO_IMPORT)
  };
};
var env = useEnv();

// presets/tov.ts
import Vue from "file:///D:/Users/Desktop/Project/juyocloud-vue/node_modules/@vitejs/plugin-vue/dist/index.mjs";
import Pages from "file:///D:/Users/Desktop/Project/juyocloud-vue/node_modules/vite-plugin-pages/dist/index.mjs";
import Icons from "file:///D:/Users/Desktop/Project/juyocloud-vue/node_modules/unplugin-icons/dist/vite.mjs";
import Inspect from "file:///D:/Users/Desktop/Project/juyocloud-vue/node_modules/vite-plugin-inspect/dist/index.mjs";

// presets/plugins/markdown.ts
import Prism from "file:///D:/Users/Desktop/Project/juyocloud-vue/node_modules/markdown-it-prism/build/index.js";
import Markdown from "file:///D:/Users/Desktop/Project/juyocloud-vue/node_modules/vite-plugin-md/dist/index.js";
var markdownWrapperClasses = env.VITE_APP_MARKDOWN ? "prose md:prose-lg lg:prose-lg dark:prose-invert text-left p-10 prose-slate prose-img:rounded-xl prose-headings:underline prose-a:text-blue-600" : "";
var markdown_default = () => {
  return env.VITE_APP_MARKDOWN && Markdown({
    wrapperClasses: markdownWrapperClasses,
    markdownItSetup(md) {
      md.use(Prism);
    }
  });
};

// presets/tov.ts
import vueJsx from "file:///D:/Users/Desktop/Project/juyocloud-vue/node_modules/@vitejs/plugin-vue-jsx/dist/index.mjs";
import I18n from "file:///D:/Users/Desktop/Project/juyocloud-vue/node_modules/@intlify/vite-plugin-vue-i18n/lib/index.mjs";
import { viteMockServe } from "file:///D:/Users/Desktop/Project/juyocloud-vue/node_modules/vite-plugin-mock/dist/index.js";
import Layouts from "file:///D:/Users/Desktop/Project/juyocloud-vue/node_modules/vite-plugin-vue-meta-layouts/dist/index.mjs";
import AutoImport from "file:///D:/Users/Desktop/Project/juyocloud-vue/node_modules/unplugin-auto-import/dist/vite.js";
import IconsResolver2 from "file:///D:/Users/Desktop/Project/juyocloud-vue/node_modules/unplugin-icons/dist/resolver.mjs";
import { FileSystemIconLoader } from "file:///D:/Users/Desktop/Project/juyocloud-vue/node_modules/unplugin-icons/dist/loaders.mjs";
import Components from "file:///D:/Users/Desktop/Project/juyocloud-vue/node_modules/unplugin-vue-components/dist/vite.mjs";
import viteCompression from "file:///D:/Users/Desktop/Project/juyocloud-vue/node_modules/vite-plugin-compression/dist/index.mjs";
import legacy from "file:///D:/Users/Desktop/Project/juyocloud-vue/node_modules/@vitejs/plugin-legacy/dist/index.mjs";
import { visualizer } from "file:///D:/Users/Desktop/Project/juyocloud-vue/node_modules/rollup-plugin-visualizer/dist/plugin/index.js";
import { createSvgIconsPlugin } from "file:///D:/Users/Desktop/Project/juyocloud-vue/node_modules/vite-plugin-svg-icons/dist/index.mjs";
import path from "path";
import {
  ArcoResolver,
  IduxResolver,
  DevUiResolver,
  QuasarResolver,
  InklineResolver,
  TDesignResolver,
  Vuetify3Resolver,
  PrimeVueResolver,
  ElementPlusResolver as ElementPlusResolver2,
  VueUseComponentsResolver
} from "file:///D:/Users/Desktop/Project/juyocloud-vue/node_modules/unplugin-vue-components/dist/resolvers.mjs";
import Modules from "file:///D:/Users/Desktop/Project/juyocloud-vue/node_modules/vite-plugin-use-modules/dist/index.mjs";

// presets/plugins/html.ts
var GenerateTitle = () => {
  let title;
  return {
    name: "vite-plugin-env-to-generate-title",
    configResolved(config) {
      title = config.env.VITE_APP_TITLE;
    },
    transformIndexHtml(html) {
      return html.replace(/<title>(.*?)<\/title>/, `<title>${title}</title>`);
    }
  };
};

// presets/shared/resolvers.ts
import { isPackageExists } from "file:///D:/Users/Desktop/Project/juyocloud-vue/node_modules/local-pkg/index.mjs";
import { ElementPlusResolver } from "file:///D:/Users/Desktop/Project/juyocloud-vue/node_modules/unplugin-vue-components/dist/resolvers.mjs";
import IconsResolver from "file:///D:/Users/Desktop/Project/juyocloud-vue/node_modules/unplugin-icons/dist/resolver.mjs";
var AutoImportResolvers = [
  ElementPlusResolver(),
  IconsResolver({
    prefix: "Icon"
  })
];
var normalizeResolvers = (options = {}) => {
  const { onlyExist = [], include = [] } = options;
  const existedResolvers = [];
  for (let i = 0; i < onlyExist.length; i++) {
    const [resolver, packageName] = onlyExist[i];
    if (isPackageExists(packageName)) {
      existedResolvers.push(resolver);
    }
  }
  existedResolvers.push(...include);
  return existedResolvers;
};

// presets/tov.ts
var __vite_injected_original_dirname = "D:\\Users\\Desktop\\Project\\juyocloud-vue\\presets";
var tov_default = () => {
  return [
    legacy({
      targets: [
        "defaults",
        "not IE 11",
        "chrome >= 49",
        "firefox >= 1",
        "edge > 1"
      ],
      additionalLegacyPolyfills: ["regenerator-runtime/runtime"],
      modernPolyfills: ["es.global-this"],
      renderLegacyChunks: true
    }),
    Modules({
      auto: true
    }),
    GenerateTitle(),
    Vue({
      include: [/\.vue$/, /\.md$/]
    }),
    markdown_default(),
    Pages({
      extensions: ["vue", "md", "tsx"]
    }),
    Layouts(),
    Inspect({
      enabled: env.VITE_APP_INSPECT
    }),
    viteMockServe({
      prodEnabled: env.VITE_APP_MOCK_IN_PRODUCTION
    }),
    Icons({
      autoInstall: true,
      compiler: "vue3",
      customCollections: {
        custom: FileSystemIconLoader("./src/assets/icons")
      }
    }),
    Components({
      extensions: ["vue", "md", "tsx"],
      include: [/\.md$/, /\.vue$/, /\.tsx$/],
      dts: resolve(__vite_injected_original_dirname, "./types/components.d.ts"),
      resolvers: normalizeResolvers({
        onlyExist: [
          [QuasarResolver(), "quasar"],
          [DevUiResolver(), "vue-devui"],
          [Vuetify3Resolver(), "vuetify"],
          [PrimeVueResolver(), "primevue"],
          [IduxResolver(), "@idux/components"],
          [TDesignResolver(), "tdesign-vue-next"],
          [InklineResolver(), "@inkline/inkline"],
          [ElementPlusResolver2({
            importStyle: "sass"
          }), "element-plus"],
          [ArcoResolver(), "@arco-design/web-vue"],
          [VueUseComponentsResolver(), "@vueuse/components"]
        ],
        include: [
          IconsResolver2({
            enabledCollections: ["ep"],
            customCollections: ["custom"]
          })
        ]
      })
    }),
    env.VITE_APP_API_AUTO_IMPORT && AutoImport({
      dirs: [
        env.VITE_APP_API_AUTO_IMPORT && "src/stores",
        env.VITE_APP_API_AUTO_IMPORT && "src/composables"
      ],
      dts: "./presets/types/auto-imports.d.ts",
      imports: ["vue", "pinia", "vue-i18n", "vue-router", "@vueuse/core"],
      resolvers: AutoImportResolvers
    }),
    visualizer({
      open: true,
      gzipSize: true,
      brotliSize: true
    }),
    I18n({
      runtimeOnly: true,
      compositionOnly: true,
      include: [resolve(__vite_injected_original_dirname, "../locales/**")]
    }),
    vueJsx(),
    viteCompression({
      disable: true,
      algorithm: env.VITE_APP_COMPRESSINON_ALGORITHM
    }),
    createSvgIconsPlugin({
      iconDirs: [path.resolve(process.cwd(), "src/assets/icons")],
      symbolId: "icon-[dir]-[name]",
      customDomId: "__svg__icons__dom__"
    })
  ];
};

// vite.config.ts
var __vite_injected_original_dirname2 = "D:\\Users\\Desktop\\Project\\juyocloud-vue";
var vite_config_default = defineConfig({
  server: {
    port: 3e3,
    proxy: {
      "/api": {
        target: "http://127.0.0.1:3300",
        changeOrigin: true,
        rewrite: (path2) => path2.replace(/^\/api/, "")
      }
    }
  },
  css: {
    preprocessorOptions: {
      scss: {
        additionalData: `@use "@/styles/element/custom.scss" as *;`
      }
    }
  },
  resolve: {
    alias: {
      "@": `${resolve2(__vite_injected_original_dirname2, "src")}/`
    }
  },
  plugins: [
    tov_default()
  ],
  define: {
    "process.env": {}
  },
  build: {
    rollupOptions: {
      output: {
        manualChunks: (id) => {
          if (id.includes("node_modules")) {
            return id.toString().split("node_modules/")[1].split("/")[0].toString();
          }
        },
        entryFileNames: "js/[name].[hash].js",
        chunkFileNames: "js/[name].[hash].js",
        assetFileNames: "[ext]/[name].[hash].[ext]"
      }
    }
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
