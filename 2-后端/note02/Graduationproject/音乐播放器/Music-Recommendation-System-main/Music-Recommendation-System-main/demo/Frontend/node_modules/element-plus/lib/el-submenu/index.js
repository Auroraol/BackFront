'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var mitt = require('mitt');
var vue = require('vue');
var ElCollapseTransition = require('../el-collapse-transition');
var ElPopper = require('../el-popper');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var mitt__default = /*#__PURE__*/_interopDefaultLegacy(mitt);
var ElCollapseTransition__default = /*#__PURE__*/_interopDefaultLegacy(ElCollapseTransition);
var ElPopper__default = /*#__PURE__*/_interopDefaultLegacy(ElPopper);

function useMenu(instance, currentIndex) {
    const rootMenu = vue.inject('rootMenu');
    const indexPath = vue.computed(() => {
        let parent = instance.parent;
        const path = [currentIndex];
        while (parent.type.name !== 'ElMenu') {
            if (parent.props.index) {
                path.unshift(parent.props.index);
            }
            parent = parent.parent;
        }
        return path;
    });
    const parentMenu = vue.computed(() => {
        let parent = instance.parent;
        while (parent && ['ElMenu', 'ElSubmenu'].indexOf(parent.type.name) === -1) {
            parent = parent.parent;
        }
        return parent;
    });
    const paddingStyle = vue.computed(() => {
        let parent = instance.parent;
        if (rootMenu.props.mode !== 'vertical')
            return {};
        let padding = 20;
        if (rootMenu.props.collapse) {
            padding = 20;
        }
        else {
            while (parent && parent.type.name !== 'ElMenu') {
                if (parent.type.name === 'ElSubmenu') {
                    padding += 20;
                }
                parent = parent.parent;
            }
        }
        return { paddingLeft: padding + 'px' };
    });
    return { parentMenu, paddingStyle, indexPath };
}

var script = vue.defineComponent({
    name: 'ElSubmenu',
    componentName: 'ElSubmenu',
    components: { ElCollapseTransition: ElCollapseTransition__default['default'], ElPopper: ElPopper__default['default'] },
    props: {
        index: {
            type: String,
            required: true,
        },
        showTimeout: {
            type: Number,
            default: 300,
        },
        hideTimeout: {
            type: Number,
            default: 300,
        },
        popperClass: String,
        disabled: Boolean,
        popperAppendToBody: {
            type: Boolean,
            default: undefined,
        },
    },
    setup(props) {
        const data = vue.reactive({
            popperJS: null,
            timeout: null,
            items: {},
            submenus: {},
            currentPlacement: '',
            mouseInChild: false,
            opened: false,
        });
        const verticalTitleRef = vue.ref(null);
        const popperVnode = vue.ref(null);
        const instance = vue.getCurrentInstance();
        const { paddingStyle, indexPath, parentMenu } = useMenu(instance, props.index);
        const { openedMenus, isMenuPopup, hoverBackground: rootHoverBackground, methods: rootMethods, props: rootProps, methods: { closeMenu }, rootMenuOn, rootMenuEmit, } = vue.inject('rootMenu');
        const { addSubMenu: parentAddSubmenu, removeSubMenu: parentRemoveSubmenu, handleMouseleave: parentHandleMouseleave, } = vue.inject(`subMenu:${parentMenu.value.uid}`);
        const submenuTitleIcon = vue.computed(() => {
            return (mode.value === 'horizontal' && isFirstLevel.value) ||
                (mode.value === 'vertical' && !rootProps.collapse)
                ? 'el-icon-arrow-down'
                : 'el-icon-arrow-right';
        });
        const isFirstLevel = vue.computed(() => {
            let isFirstLevel = true;
            let parent = instance.parent;
            while (parent && parent.type.name !== 'ElMenu') {
                if (['ElSubmenu', 'ElMenuItemGroup'].includes(parent.type.name)) {
                    isFirstLevel = false;
                    break;
                }
                else {
                    parent = parent.parent;
                }
            }
            return isFirstLevel;
        });
        const appendToBody = vue.computed(() => {
            return props.popperAppendToBody === undefined
                ? isFirstLevel.value
                : Boolean(props.popperAppendToBody);
        });
        const menuTransitionName = vue.computed(() => {
            return rootProps.collapse ? 'el-zoom-in-left' : 'el-zoom-in-top';
        });
        const opened = vue.computed(() => {
            return openedMenus.value.includes(props.index);
        });
        const active = vue.computed(() => {
            let isActive = false;
            const submenus = data.submenus;
            const items = data.items;
            Object.keys(items).forEach(index => {
                if (items[index].active) {
                    isActive = true;
                }
            });
            Object.keys(submenus).forEach(index => {
                if (submenus[index].active) {
                    isActive = true;
                }
            });
            return isActive;
        });
        const backgroundColor = vue.computed(() => {
            return rootProps.backgroundColor || '';
        });
        const activeTextColor = vue.computed(() => {
            return rootProps.activeTextColor || '';
        });
        const textColor = vue.computed(() => {
            return rootProps.textColor || '';
        });
        const mode = vue.computed(() => {
            return rootProps.mode;
        });
        const titleStyle = vue.computed(() => {
            if (mode.value !== 'horizontal') {
                return {
                    color: textColor.value,
                };
            }
            return {
                borderBottomColor: active.value
                    ? rootProps.activeTextColor
                        ? activeTextColor.value
                        : ''
                    : 'transparent',
                color: active.value ? activeTextColor.value : textColor.value,
            };
        });
        const subMenuEmitter = mitt__default['default']();
        const doDestroy = () => {
            var _a;
            (_a = popperVnode.value) === null || _a === void 0 ? void 0 : _a.doDestroy();
        };
        const handleCollapseToggle = value => {
            if (value) {
                updatePlacement();
            }
            else {
                doDestroy();
            }
        };
        const addItem = item => {
            data.items[item.index] = item;
        };
        const removeItem = item => {
            delete data.items[item.index];
        };
        const addSubMenu = item => {
            data.submenus[item.index] = item;
        };
        const removeSubMenu = item => {
            delete data.submenus[item.index];
        };
        const handleClick = () => {
            const disabled = props.disabled;
            if ((rootProps.menuTrigger === 'hover' &&
                rootProps.mode === 'horizontal') ||
                (rootProps.collapse && rootProps.mode === 'vertical') ||
                disabled) {
                return;
            }
            rootMenuEmit('submenu:submenu-click', { index: props.index, indexPath });
        };
        const handleMouseenter = (event, showTimeout = props.showTimeout) => {
            if (!('ActiveXObject' in window) &&
                event.type === 'focus' &&
                !event.relatedTarget) {
                return;
            }
            const disabled = props.disabled;
            if ((rootProps.menuTrigger === 'click' &&
                rootProps.mode === 'horizontal') ||
                (!rootProps.collapse && rootProps.mode === 'vertical') ||
                disabled) {
                return;
            }
            subMenuEmitter.emit('submenu:mouse-enter-child');
            clearTimeout(data.timeout);
            data.timeout = setTimeout(() => {
                rootMethods.openMenu(props.index, indexPath);
            }, showTimeout);
            if (appendToBody.value) {
                parentMenu.value.vnode.el.dispatchEvent(new MouseEvent('mouseenter'));
            }
        };
        const handleMouseleave = (deepDispatch = false) => {
            if ((rootProps.menuTrigger === 'click' &&
                rootProps.mode === 'horizontal') ||
                (!rootProps.collapse && rootProps.mode === 'vertical')) {
                return;
            }
            subMenuEmitter.emit('submenu:mouse-leave-child');
            clearTimeout(data.timeout);
            data.timeout = setTimeout(() => {
                !data.mouseInChild && closeMenu(props.index);
            }, props.hideTimeout);
            if (appendToBody.value && deepDispatch) {
                if (instance.parent.type.name === 'ElSubmenu') {
                    parentHandleMouseleave(true);
                }
            }
        };
        const handleTitleMouseenter = () => {
            var _a;
            if (mode.value === 'horizontal' && !rootProps.backgroundColor)
                return;
            const title = ((_a = popperVnode.value) === null || _a === void 0 ? void 0 : _a.triggerRef) || verticalTitleRef.value;
            title && (title.style.backgroundColor = rootHoverBackground.value);
        };
        const handleTitleMouseleave = () => {
            var _a;
            if (mode.value === 'horizontal' && !rootProps.backgroundColor)
                return;
            const title = ((_a = popperVnode.value) === null || _a === void 0 ? void 0 : _a.triggerRef) || verticalTitleRef.value;
            title && (title.style.backgroundColor = rootProps.backgroundColor || '');
        };
        const updatePlacement = () => {
            data.currentPlacement =
                mode.value === 'horizontal' && isFirstLevel.value
                    ? 'bottom-start'
                    : 'right-start';
        };
        vue.provide(`subMenu:${instance.uid}`, {
            addSubMenu,
            removeSubMenu,
            handleMouseleave,
        });
        vue.onBeforeMount(() => {
            rootMenuOn('rootMenu:toggle-collapse', (val) => {
                handleCollapseToggle(val);
            });
            subMenuEmitter.on('submenu:mouse-enter-child', () => {
                data.mouseInChild = true;
                clearTimeout(data.timeout);
            });
            subMenuEmitter.on('submenu:mouse-leave-child', () => {
                data.mouseInChild = false;
                clearTimeout(data.timeout);
            });
        });
        vue.onMounted(() => {
            rootMethods.addSubMenu({
                index: props.index,
                indexPath,
                active,
            });
            parentAddSubmenu({
                index: props.index,
                indexPath,
                active,
            });
            updatePlacement();
        });
        vue.onBeforeUnmount(() => {
            parentRemoveSubmenu({
                index: props.index,
                indexPath,
                active,
            });
            rootMethods.removeSubMenu({
                index: props.index,
                indexPath,
                active,
            });
        });
        return {
            data,
            props,
            mode,
            active,
            isMenuPopup,
            opened,
            paddingStyle,
            titleStyle,
            backgroundColor,
            rootProps,
            menuTransitionName,
            submenuTitleIcon,
            appendToBody,
            handleClick,
            handleMouseenter,
            handleMouseleave,
            handleTitleMouseenter,
            handleTitleMouseleave,
            addItem,
            removeItem,
            addSubMenu,
            removeSubMenu,
            popperVnode,
            verticalTitleRef,
        };
    },
});

function render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_el_popper = vue.resolveComponent("el-popper");
  const _component_el_collapse_transition = vue.resolveComponent("el-collapse-transition");

  return (vue.openBlock(), vue.createBlock("li", {
    class: [
      'el-submenu',
      _ctx.active && 'is-active',
      _ctx.opened && 'is-opened',
      _ctx.disabled && 'is-disabled',
    ],
    role: "menuitem",
    "aria-haspopup": "true",
    "aria-expanded": "opened",
    onMouseenter: _cache[11] || (_cache[11] = (...args) => (_ctx.handleMouseenter(...args))),
    onMouseleave: _cache[12] || (_cache[12] = () => _ctx.handleMouseleave(false)),
    onFocus: _cache[13] || (_cache[13] = (...args) => (_ctx.handleMouseenter(...args)))
  }, [
    (_ctx.isMenuPopup)
      ? (vue.openBlock(), vue.createBlock(_component_el_popper, {
          key: 0,
          ref: "popperVnode",
          visible: _ctx.opened,
          "onUpdate:visible": _cache[7] || (_cache[7] = $event => (_ctx.opened = $event)),
          "manual-mode": true,
          effect: "light",
          pure: true,
          offset: 6,
          "show-arrow": false,
          "popper-class": _ctx.props.popperClass,
          placement: _ctx.data.currentPlacement,
          "append-to-body": _ctx.appendToBody
        }, {
          default: vue.withCtx(() => [
            vue.createVNode(vue.Transition, { name: _ctx.menuTransitionName }, {
              default: vue.withCtx(() => [
                vue.withDirectives(vue.createVNode("div", {
                  ref: "menu",
                  class: [`el-menu--${_ctx.mode}`, _ctx.props.popperClass],
                  onMouseenter: _cache[1] || (_cache[1] = $event => _ctx.handleMouseenter($event, 100)),
                  onMouseleave: _cache[2] || (_cache[2] = () => _ctx.handleMouseleave(true)),
                  onFocus: _cache[3] || (_cache[3] = $event => _ctx.handleMouseenter($event, 100))
                }, [
                  vue.createVNode("ul", {
                    role: "menu",
                    class: [
                'el-menu el-menu--popup',
                `el-menu--popup-${_ctx.data.currentPlacement}`,
              ],
                    style: { backgroundColor: _ctx.rootProps.backgroundColor || '' }
                  }, [
                    vue.renderSlot(_ctx.$slots, "default")
                  ], 6 /* CLASS, STYLE */)
                ], 34 /* CLASS, HYDRATE_EVENTS */), [
                  [vue.vShow, _ctx.opened]
                ])
              ]),
              _: 3
            }, 8 /* PROPS */, ["name"])
          ]),
          trigger: vue.withCtx(() => [
            vue.createVNode("div", {
              class: "el-submenu__title",
              style: [_ctx.paddingStyle, _ctx.titleStyle, { backgroundColor: _ctx.backgroundColor }],
              onClick: _cache[4] || (_cache[4] = (...args) => (_ctx.handleClick(...args))),
              onMouseenter: _cache[5] || (_cache[5] = (...args) => (_ctx.handleTitleMouseenter(...args))),
              onMouseleave: _cache[6] || (_cache[6] = (...args) => (_ctx.handleTitleMouseleave(...args)))
            }, [
              vue.renderSlot(_ctx.$slots, "title"),
              vue.createVNode("i", {
                class: ['el-submenu__icon-arrow', _ctx.submenuTitleIcon]
              }, null, 2 /* CLASS */)
            ], 36 /* STYLE, HYDRATE_EVENTS */)
          ]),
          _: 1
        }, 8 /* PROPS */, ["visible", "popper-class", "placement", "append-to-body"]))
      : vue.createCommentVNode("v-if", true),
    (!_ctx.isMenuPopup)
      ? (vue.openBlock(), vue.createBlock("div", {
          key: 1,
          ref: "verticalTitleRef",
          class: "el-submenu__title",
          style: [_ctx.paddingStyle, _ctx.titleStyle, { backgroundColor: _ctx.backgroundColor }],
          onClick: _cache[8] || (_cache[8] = (...args) => (_ctx.handleClick(...args))),
          onMouseenter: _cache[9] || (_cache[9] = (...args) => (_ctx.handleTitleMouseenter(...args))),
          onMouseleave: _cache[10] || (_cache[10] = (...args) => (_ctx.handleTitleMouseleave(...args)))
        }, [
          vue.renderSlot(_ctx.$slots, "title"),
          vue.createVNode("i", {
            class: ['el-submenu__icon-arrow', _ctx.submenuTitleIcon]
          }, null, 2 /* CLASS */)
        ], 36 /* STYLE, HYDRATE_EVENTS */))
      : vue.createCommentVNode("v-if", true),
    (!_ctx.isMenuPopup)
      ? (vue.openBlock(), vue.createBlock(_component_el_collapse_transition, { key: 2 }, {
          default: vue.withCtx(() => [
            vue.withDirectives(vue.createVNode("ul", {
              role: "menu",
              class: "el-menu el-menu--inline",
              style: { backgroundColor: _ctx.rootProps.backgroundColor || '' }
            }, [
              vue.renderSlot(_ctx.$slots, "default")
            ], 4 /* STYLE */), [
              [vue.vShow, _ctx.opened]
            ])
          ]),
          _: 3
        }))
      : vue.createCommentVNode("v-if", true)
  ], 34 /* CLASS, HYDRATE_EVENTS */))
}

script.render = render;
script.__file = "packages/menu/src/submenu.vue";

script.install = (app) => {
    app.component(script.name, script);
};
const _Submenu = script;

exports.default = _Submenu;
