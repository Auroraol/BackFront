import { VNode } from 'vue';
export declare type MessageType = 'success' | 'warning' | 'info' | 'error';
export declare type MessageBoxCloseAction = 'confirm' | 'cancel' | 'close';
export declare type MessageBoxData = MessageBoxInputData;
export interface MessageBoxInputData {
    value: string;
    action: MessageBoxCloseAction;
}
export interface MessageBoxInputValidator {
    (value: string): boolean | string;
}
export declare class ElMessageBoxComponent {
    title: string;
    message: string;
    type: MessageType;
    iconClass: string;
    customClass: string;
    showInput: boolean;
    showClose: boolean;
    inputValue: string;
    inputPlaceholder: string;
    inputType: string;
    inputPattern: RegExp;
    inputValidator: MessageBoxInputValidator;
    inputErrorMessage: string;
    showConfirmButton: boolean;
    showCancelButton: boolean;
    action: MessageBoxCloseAction;
    dangerouslyUseHTMLString: boolean;
    confirmButtonText: string;
    cancelButtonText: string;
    confirmButtonLoading: boolean;
    cancelButtonLoading: boolean;
    confirmButtonClass: string;
    confirmButtonDisabled: boolean;
    cancelButtonClass: string;
    editorErrorMessage: string;
    close(): any;
}
export interface ElMessageBoxOptions {
    title?: string;
    message?: string | VNode;
    type?: MessageType;
    iconClass?: string;
    customClass?: string;
    callback?: (action: MessageBoxCloseAction, instance: ElMessageBoxComponent) => void;
    beforeClose?: (action: MessageBoxCloseAction, instance: ElMessageBoxComponent, done: (() => void)) => void;
    lockScroll?: boolean;
    showCancelButton?: boolean;
    showConfirmButton?: boolean;
    showClose?: boolean;
    cancelButtonText?: string;
    confirmButtonText?: string;
    cancelButtonClass?: string;
    confirmButtonClass?: string;
    center?: boolean;
    dangerouslyUseHTMLString?: boolean;
    roundButton?: boolean;
    closeOnClickModal?: boolean;
    closeOnPressEscape?: boolean;
    closeOnHashChange?: boolean;
    showInput?: boolean;
    inputPlaceholder?: string;
    inputValue?: string;
    inputPattern?: RegExp;
    inputType?: string;
    inputValidator?: MessageBoxInputValidator;
    inputErrorMessage?: string;
    distinguishCancelAndClose?: boolean;
}
export interface ElMessageBoxShortcutMethod {
    (message: string, title: string, options?: ElMessageBoxOptions): Promise<MessageBoxData>;
    (message: string, options?: ElMessageBoxOptions): Promise<MessageBoxData>;
}
export interface ElMessageBox {
    (message: string, title?: string, type?: string): Promise<MessageBoxData>;
    (options: ElMessageBoxOptions): Promise<MessageBoxData>;
    alert: ElMessageBoxShortcutMethod;
    confirm: ElMessageBoxShortcutMethod;
    prompt: ElMessageBoxShortcutMethod;
    setDefaults(defaults: ElMessageBoxOptions): void;
    close(): void;
}
