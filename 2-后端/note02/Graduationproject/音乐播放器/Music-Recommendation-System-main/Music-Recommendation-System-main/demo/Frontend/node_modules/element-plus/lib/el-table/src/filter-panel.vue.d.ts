import { WritableComputedRef, PropType } from 'vue';
import { Store, TableColumnCtx } from './table.type';
declare const _default: import("vue").DefineComponent<{
    placement: {
        type: StringConstructor;
        default: string;
    };
    store: {
        type: PropType<Store>;
    };
    column: {
        type: PropType<TableColumnCtx>;
    };
    upDataColumn: {
        type: FunctionConstructor;
    };
}, {
    tooltipVisible: import("vue").Ref<boolean>;
    multiple: import("vue").ComputedRef<true | {
        type: boolean;
        default: true;
    }>;
    filteredValue: WritableComputedRef<unknown[]>;
    filterValue: WritableComputedRef<unknown>;
    filters: import("vue").ComputedRef<unknown[]>;
    handleConfirm: () => void;
    handleReset: () => void;
    handleSelect: (_filterValue?: string | string[]) => void;
    isActive: (filter: any) => boolean;
    t: (path: string, option?: any) => string;
    showFilterPanel: (e: MouseEvent) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    placement: string;
} & {
    store?: Store;
    column?: TableColumnCtx;
    upDataColumn?: Function;
}>, {
    placement: string;
}>;
export default _default;
