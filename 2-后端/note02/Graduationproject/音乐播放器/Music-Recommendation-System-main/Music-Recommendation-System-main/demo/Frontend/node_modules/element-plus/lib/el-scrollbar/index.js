'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var resizeEvent = require('../utils/resize-event');
var util = require('../utils/util');
var vue = require('vue');
var dom = require('../utils/dom');

const BAR_MAP = {
    vertical: {
        offset: 'offsetHeight',
        scroll: 'scrollTop',
        scrollSize: 'scrollHeight',
        size: 'height',
        key: 'vertical',
        axis: 'Y',
        client: 'clientY',
        direction: 'top',
    },
    horizontal: {
        offset: 'offsetWidth',
        scroll: 'scrollLeft',
        scrollSize: 'scrollWidth',
        size: 'width',
        key: 'horizontal',
        axis: 'X',
        client: 'clientX',
        direction: 'left',
    },
};
function renderThumbStyle({ move, size, bar }) {
    const style = {};
    const translate = `translate${bar.axis}(${move}%)`;
    style[bar.size] = size;
    style.transform = translate;
    style.msTransform = translate;
    style.webkitTransform = translate;
    return style;
}

var Bar = vue.defineComponent({
    name: 'Bar',
    props: {
        vertical: Boolean,
        size: String,
        move: Number,
    },
    setup(props) {
        const instance = vue.getCurrentInstance();
        const thumb = vue.ref(null);
        const wrap = vue.inject('scroll-bar-wrap', {});
        const bar = vue.computed(() => {
            return BAR_MAP[props.vertical ? 'vertical' : 'horizontal'];
        });
        const barStore = vue.ref({});
        const cursorDown = vue.ref(null);
        const clickThumbHandler = e => {
            if (e.ctrlKey || e.button === 2) {
                return;
            }
            startDrag(e);
            barStore.value[bar.value.axis] = (e.currentTarget[bar.value.offset] - (e[bar.value.client] - e.currentTarget.getBoundingClientRect()[bar.value.direction]));
        };
        const clickTrackHandler = e => {
            const offset = Math.abs(e.target.getBoundingClientRect()[bar.value.direction] - e[bar.value.client]);
            const thumbHalf = (thumb.value[bar.value.offset] / 2);
            const thumbPositionPercentage = ((offset - thumbHalf) * 100 / instance.vnode.el[bar.value.offset]);
            wrap.value[bar.value.scroll] = (thumbPositionPercentage * wrap.value[bar.value.scrollSize] / 100);
        };
        const startDrag = e => {
            e.stopImmediatePropagation();
            cursorDown.value = true;
            dom.on(document, 'mousemove', mouseMoveDocumentHandler);
            dom.on(document, 'mouseup', mouseUpDocumentHandler);
            document.onselectstart = () => false;
        };
        const mouseMoveDocumentHandler = e => {
            if (cursorDown.value === false)
                return;
            const prevPage = barStore.value[bar.value.axis];
            if (!prevPage)
                return;
            const offset = ((instance.vnode.el.getBoundingClientRect()[bar.value.direction] - e[bar.value.client]) * -1);
            const thumbClickPosition = (thumb.value[bar.value.offset] - prevPage);
            const thumbPositionPercentage = ((offset - thumbClickPosition) * 100 / instance.vnode.el[bar.value.offset]);
            wrap.value[bar.value.scroll] = (thumbPositionPercentage * wrap.value[bar.value.scrollSize] / 100);
        };
        function mouseUpDocumentHandler() {
            cursorDown.value = false;
            barStore.value[bar.value.axis] = 0;
            dom.off(document, 'mousemove', mouseMoveDocumentHandler);
            document.onselectstart = null;
        }
        vue.onUnmounted(() => {
            dom.off(document, 'mouseup', mouseUpDocumentHandler);
        });
        return () => vue.h('div', {
            class: ['el-scrollbar__bar', 'is-' + bar.value.key],
            onMousedown: clickTrackHandler,
        }, vue.h('div', {
            ref: thumb,
            class: 'el-scrollbar__thumb',
            onMousedown: clickThumbHandler,
            style: renderThumbStyle({
                size: props.size,
                move: props.move,
                bar: bar.value,
            }),
        }));
    },
});

var script = vue.defineComponent({
    name: 'ElScrollbar',
    components: { Bar },
    props: {
        native: {
            type: Boolean,
            default: false,
        },
        wrapStyle: {
            type: [String, Array],
            default: '',
        },
        wrapClass: {
            type: [String, Array],
            default: '',
        },
        viewClass: {
            type: [String, Array],
            default: '',
        },
        viewStyle: {
            type: [String, Array],
            default: '',
        },
        noresize: Boolean,
        tag: {
            type: String,
            default: 'div',
        },
    },
    setup(props) {
        const sizeWidth = vue.ref('0');
        const sizeHeight = vue.ref('0');
        const moveX = vue.ref(0);
        const moveY = vue.ref(0);
        const wrap = vue.ref(null);
        const resize = vue.ref(null);
        vue.provide('scroll-bar-wrap', wrap);
        const handleScroll = () => {
            if (!props.native && wrap.value) {
                moveY.value = (wrap.value.scrollTop * 100) / wrap.value.clientHeight;
                moveX.value = (wrap.value.scrollLeft * 100) / wrap.value.clientWidth;
            }
        };
        const update = () => {
            if (!wrap.value)
                return;
            const heightPercentage = (wrap.value.clientHeight * 100) / wrap.value.scrollHeight;
            const widthPercentage = (wrap.value.clientWidth * 100) / wrap.value.scrollWidth;
            sizeHeight.value = heightPercentage < 100 ? heightPercentage + '%' : '';
            sizeWidth.value = widthPercentage < 100 ? widthPercentage + '%' : '';
        };
        vue.onMounted(() => {
            if (props.native)
                return;
            vue.nextTick(update);
            !props.noresize && resizeEvent.addResizeListener(resize.value, update);
        });
        vue.onBeforeUnmount(() => {
            if (props.native)
                return;
            !props.noresize && resizeEvent.removeResizeListener(resize.value, update);
        });
        const style = vue.computed(() => {
            let style = props.wrapStyle;
            if (Array.isArray(props.wrapStyle)) {
                style = util.toObject(props.wrapStyle);
            }
            return style;
        });
        return {
            moveX,
            moveY,
            sizeWidth,
            sizeHeight,
            style,
            wrap,
            resize,
            update,
            handleScroll,
        };
    },
});

const _hoisted_1 = { class: "el-scrollbar" };

function render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_bar = vue.resolveComponent("bar");

  return (vue.openBlock(), vue.createBlock("div", _hoisted_1, [
    vue.createVNode("div", {
      ref: "wrap",
      class: [
        _ctx.wrapClass,
        'el-scrollbar__wrap',
        _ctx.native ? '' : 'el-scrollbar__wrap--hidden-default',
      ],
      style: _ctx.style,
      onScroll: _cache[1] || (_cache[1] = (...args) => (_ctx.handleScroll(...args)))
    }, [
      (vue.openBlock(), vue.createBlock(vue.resolveDynamicComponent(_ctx.tag), {
        ref: "resize",
        class: ['el-scrollbar__view', _ctx.viewClass],
        style: _ctx.viewStyle
      }, {
        default: vue.withCtx(() => [
          vue.renderSlot(_ctx.$slots, "default")
        ]),
        _: 3
      }, 8 /* PROPS */, ["class", "style"]))
    ], 38 /* CLASS, STYLE, HYDRATE_EVENTS */),
    (!_ctx.native)
      ? (vue.openBlock(), vue.createBlock(vue.Fragment, { key: 0 }, [
          vue.createVNode(_component_bar, {
            move: _ctx.moveX,
            size: _ctx.sizeWidth
          }, null, 8 /* PROPS */, ["move", "size"]),
          vue.createVNode(_component_bar, {
            vertical: "",
            move: _ctx.moveY,
            size: _ctx.sizeHeight
          }, null, 8 /* PROPS */, ["move", "size"])
        ], 64 /* STABLE_FRAGMENT */))
      : vue.createCommentVNode("v-if", true)
  ]))
}

script.render = render;
script.__file = "packages/scrollbar/src/index.vue";

script.install = (app) => {
    app.component(script.name, script);
};
const _Scrollbar = script;

exports.default = _Scrollbar;
